## @section Global parameters
## @param global.AppVersion [nullable,string] [default: ""] Provide custom appVersion, to override the default one. All the ENBUILD images will be of the same version. To use indidual tag for each service set the tag on per service basis.
## @param global.domain [default: ijuned.com] What domain to use to expose the ENBUILD using istio or Ingress
## @param global.disable_tls_gitlab [default: false] Set to true if you are using self-signed certificates
## @param global.ingress.enabled [default: false] Should we create the Ingress Resources ?
## @param global.ingress.tls [default: false] Is Ingress TLS enabled ?
## @param global.ingress.tls_secret [string] If Ingress is TLS enabled, Provide the Secret for the TLS Certificate.
## @param global.ingress.classname [string] Ingress classname if enabled.
## @param global.ingress.annotations [array] Ingress annotations if enabled.
## @param global.istio.enabled [default: false]   Should we create the Istio Resources ?
## @param global.istio.gateway Istio gateway to use for creating Virtual Service.
## @param global.image.registry [default: registry.gitlab.com]  Container registry to pull images from
## @param global.image.pullPolicy [default: Always]  Container imagePullPolicy
## @param global.image.registry_credentials [nullable,object] if the image.registry is private container registry, provide the credentials
## @param global.image.registry_credentials.username [nullable,string]  Container registry Username
## @param global.image.registry_credentials.password  [nullable,string] Container registry password
## @param global.monitoring.enabled  [default: true] Should we install loki-stack for monitoring , if yes set to true , set the lok-stack values in the values.yaml
## 
global:
  AppVersion: ""
  domain: ijuned.com
  disable_tls_gitlab: false  # Set to true if you are using self-signed certificates
  monitoring:
    enabled: false
  ingress:
    enabled: false
    tls: false
    tls_secret: vivplatform-cert
    classname:
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
  istio:
    enabled: false
    gateway: istio-system/main
  image:
    registry: registry.gitlab.com
    pullPolicy: Always
    registry_credentials: {}
    # username: registry_user_name
    # password: registry_password

## @skip jupyterhub
jupyterhub:
  proxy:
    service:
      type: ClusterIP
  hub:
    baseUrl: /jupyter
    config:
      JupyterHub:
        authenticator_class: dummy
        allow_named_servers: False
      Authenticator:
        auto_login: false
  cull:
    enabled: true
  singleuser:
    image:
      pullPolicy: Always
    profileList:
      - display_name: "CDAO Reliable AI Instance"
        description: "Includes base Reliable AI Security Toolkit Python Tools - Counterfit, Foolbox and Armory"
        default: true
      - display_name: "CDAO Reliable AI Datascience Instance"
        description: "Includes base Reliable AI Explainability Toolkit Python Tools - XAITK - Saliency, lime, Shap, Explainer Dashboard"
        kubespawner_override:
          image: jupyter/scipy-notebook:latest
      - display_name: "Spark environment"
        description: "The Jupyter Stacks spark image!"
        # kubespawner_override:
        #   image: jupyter/all-spark-notebook:2343e33dec46


## @section ENBUILD RabbitMQ parameters
## @param rabbitmq.enabled  [default: true] Set to false to use existing RabbitMQ
## @param rabbitmq.replicaCount  RabbitMQ replicaCount
## @param rabbitmq.auth.username  RabbitMQ username
## @param rabbitmq.auth.password  RabbitMQ password
## @param rabbitmq.auth.erlangCookie  RabbitMQ erlangCookie
## @skip rabbitmq.clustering
## @param rabbitmq.host [nullable,string] If `rabbitmq.enabled` is false , provide the right rabbitmq endpoint
## @skip rabbitmq.env
## @param rabbitmq.queue_prefix Queue Prefix for all RabbitMQ Queues
rabbitmq:
  enabled: true
  replicaCount: 1
  auth:
    username: admin
    password: SuperSecret
    erlangCookie: lamba
  clustering:
    forceBoot: true
  host: rabbitmq.rabbitmq # Needed only rabbitmq.enabled is false
  env: prod
  queue_prefix: enbuild

## @section ENBUILD Backend/DB parameters
## @param mongodb.enabled  [default: false] Set to true to Deploy the MongoDB.
## @param mongodb.mongo_root_username [string] DB username. If `mongodb.enabled` this is used to to set the username. Else this is username for existing Cosmos or DocumentDB
## @param mongodb.mongo_root_password [string]  DB Password. If `mongodb.enabled` this is used to to set the password. Else this is password for existing Cosmos or DocumentDB
## @param mongodb.mongo_server [nullable,string] If `mongodb.enabled` is false , provide the right cosmosDB/DocumentDB endpoint
## @param mongodb.image.repository Container repository for mongodb Container
## @param mongodb.image.tag Container tag for mongodb Container
mongodb:
  enabled: true
  mongo_root_username: "enbuild"
  mongo_root_password: "mongo_root_password"
  mongo_server: "If you are using cosmosDB then set the right cosmosDB endpoint as mongo_server and set the enabled=false"
  image:
    repository: enbuild-staging/vivsoft-platform-ui/mongodb
    tag: 4.4.5

## @section ENBUILD UI Services parameters
## @param enbuildUi.image.repository  Container repository for enbuildUi
## @param enbuildUi.image.tag  [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildUi.replicas Container enbuildUI Replicas
## @param enbuildUi.service_type  enbuildUI service_type
## @param enbuildUi.node_port  enbuildUI node_port
## @param enbuildUi.hostname  enbuild service hostname. `enbuildUi.hostname`.`global.domain` becomes your FQDN
## @param enbuildUi.kiali_url  kiali_url 
## @param enbuildUi.grafana_url  grafana_url 
## @param enbuildUi.loki_url  loki_url 
## @param enbuildUi.kubecost_url  kubecost_url 
enbuildUi:
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-frontend
  replicas: 1
  service_type: ClusterIP
  node_port: 30080
  hostname: enbuild # hostname.domain become FQDN
  kiali_url: https://kiali.ijuned.com/kiali/
  grafana_url: https://grafana.ijuned.com/
  loki_url: https://grafana.ijuned.com/d/liz0yRCZz/logs-app?orgId=1
  kubecost_url: https://kubecost.ijuned.com/overview.html

## @section ENBUILD Backend Services parameters
## @param enbuildBk.image.repository  Container repository for enbuildBk
## @param enbuildBk.image.tag  [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildBk.replicas Container enbuildBk Replicas
## @param enbuildBk.service_type  enbuildBk service_type
## @param enbuildBk.encryption_key  encryption_key to be used by Backend
enbuildBk:
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-backend
  replicas: 1
  service_type: ClusterIP
  encryption_key: "encryption_key"

## @section ENBUILD USER Services parameters
## @param enbuildUser.image.repository  Container repository for enbuildUser
## @param enbuildUser.image.tag [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildUser.replicas Container enbuildUser Replicas
## @param enbuildUser.service_type  enbuildUser service_type
enbuildUser:
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-user
  replicas: 1
  service_type: ClusterIP

## @section ENBUILD MQ Consumer Services parameters
## @param enbuildConsumer.image.repository  Container repository for enbuildConsumer
## @param enbuildConsumer.image.tag [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildConsumer.replicas Container enbuildConsumer Replicas
enbuildConsumer:
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-mq-consumer
  replicas: 1

## @section ENBUILD ML Services parameters
## @param enbuildMl.enabled [default: false] Should we create the ENBUILD ML microservice, which also controls whether or not to install jupyterhub
## @param enbuildMl.image.repository  Container repository for enbuildMl
## @param enbuildMl.image.tag  [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildMl.replicas Container enbuildMl Replicas
## @param enbuildMl.service_type  enbuildMl service_type
enbuildMl:
  enabled: false
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-ml
  replicas: 1
  service_type: ClusterIP

## @section ENBUILD GenAI Services parameters
## @param enbuildGenAI.enabled [default: false] Should we create the ENBUILD GenAI microservice, which also controls whether or not to install Ollama.
## @param enbuildGenAI.image.repository  Container repository for enbuildGenAI
## @param enbuildGenAI.image.tag  [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildGenAI.replicas Container enbuildGenAI Replicas
## @param enbuildGenAI.service_type  enbuildGenAI service_type
## @param enbuildGenAI.api_key  api_key for OpenAI service.
enbuildGenAI:
  enabled: false
  api_key: "dummy"
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-genai
  replicas: 1
  service_type: ClusterIP

## @section ENBUILD AI Services parameters
## @param enbuildAI.enabled [default: false] Should we create the ENBUILD AI microservice, which also controls whether or not to install Ollama.
## @param enbuildAI.image.repository  Container repository for enbuildAI
## @param enbuildAI.image.tag  [nullable] Container image tag. Skip to use the HelmChart appVersion as Image Tag
## @param enbuildAI.replicas Container enbuilAI Replicas
## @param enbuildAI.service_type  enbuildAI service_type
enbuildAI:
  enabled: false
  image:
    repository: enbuild-staging/vivsoft-platform-ui/enbuild-ai
  replicas: 1
  service_type: ClusterIP

## @skip open-webui
open-webui:
  ollama:
    enabled: true
    image:
      tag: "0.3.1"
    ollama:
      gpu:
        enabled: false
        type: 'nvidia'
        number: 1
      models:
        - llama3.1
    runtimeClassName: ""
    persistentVolume:
      enabled: true

## @skip loki-stack
loki-stack:
  test_pod:
    enabled: false
  loki:
    enabled: true
  promtail:
    enabled: true
  fluent-bit:
    enabled: false
  prometheus:
    enabled: true
    isDefault: false
    url: http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}
    datasource:
      jsonData: "{}"
  filebeat:
    enabled: false
  logstash:
    enabled: false
  grafana:
    enabled: true
    datasources:
      - datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          url: http://{{ .Release.Name }}-prometheus-server:80
          access: proxy
          isDefault: false
        - name: Loki
          type: loki
          url: http://{{ .Release.Name }}-loki:3100
          access: proxy
          isDefault: false
    dashboards:
      - default:
        Logs_App:
          gnetId: 13639
          revision: 1
          datasource: Loki
        Kubernetes_Cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
    dashboardProviders:
      - dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    persistence:
      enabled: true
    adminPassword: V1v$oftR0ck%
    adminUser: admin
    grafana.ini:
      auth:
        disable_login_form: true
        auto_login: true
      auth.basic:
        enabled: true
      auth.generic_oauth:
        enabled: false
        name: Keycloak-OAuth
        allow_sign_up: true
        auto_login: true
        client_id:  enbuild
        client_secret: "zUNDlLkod5skewin0DODY4fuHFt1t4f3"
        scopes: "openid email profile offline_access roles"
        email_attribute_path: email
        login_attribute_path: username
        name_attribute_path: full_name
        auth_url: "https://keycloak.vivplatform.io/auth/realms/enbuild-dev/protocol/openid-connect/auth"
        token_url: "https://keycloak.vivplatform.io/auth/realms/enbuild-dev/protocol/openid-connect/token"
        api_url: "https://keycloak.vivplatform.io/auth/realms/enbuild-dev/protocol/openid-connect/userinfo"
        skip_org_role_sync: false
        allow_assign_grafana_admin: true
        role_attribute_path : contains(realm_access.roles, "admin") && "GrafanaAdmin" || contains(roles[*], 'devops') && 'Editor' || 'Viewer'
      auth.anonymous:
        enabled: false
        hide_version: true
        org_name: Main Org.
        org_role: Viewer
      security:
        allow_embedding: true
      feature_toggles:
        accessTokenExpirationCheck: true
      server:
        root_url: https://enbuild.{{ .Values.global.domain }}/grafana/
        serve_from_sub_path: true
